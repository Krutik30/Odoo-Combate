// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("Admin")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminDetails      adminDetails?
  advertiserDetails advertiserDetails?
  spaceOwnerDetails spaceOwnerDetails?

  @@map("user")
}

model adminDetails {
  user_id       Int    @id
  fullName      String
  contactNumber Int
  profilePic    String

  user user?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("admin_detail")
}

model advertiserDetails {
  user_id        Int    @id
  fullName       String
  contactNumber  Int
  department     String
  companyAddress String
  industry       String
  profilePic     String
  ownerDetailId  String

  user      user?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertise advertise[]

  @@map("advertiser_detail")
}

model spaceOwnerDetails {
  user_id        Int    @id
  fullName       String
  contactNumber  Int
  companyAddress String
  profilePic     String

  user   user?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaces space[]

  @@map("spaceowner_detail")
}

model space {
  id                  Int    @id @default(autoincrement())
  name                String
  description         String
  address             String
  location            String
  ownerId             Int
  status              String
  price               Int
  size                Int
  type                String
  image               String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner             spaceOwnerDetails @relation(fields: [ownerId], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  advertise         advertise[]
  performanceMetric performanceMetric?
  booking           booking?

  @@map("space")
}

model advertise {
  id           Int      @id @default(autoincrement())
  spaceId      Int?     @unique
  advertiserId Int     @unique
  startDate    DateTime
  endDate      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space      space?             @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertiser advertiserDetails @relation(fields: [advertiserId], references: [user_id], onDelete: Cascade, onUpdate: Cascade)
  booking    booking?

  @@map("advertise")
}

model performanceMetric {
  id           Int @id @default(autoincrement())
  advertiseId  Int
  advertiserId Int
  spaceId      Int @unique
  reach        Int
  engagement   Int
  converstion  Int
  dayRange     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space space? @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("performance_matric")
}

model booking {
  id          Int @id @default(autoincrement())
  spaceId     Int @unique
  adveriserId Int @unique
  price       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  space      space     @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  advertiser advertise @relation(fields: [adveriserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("booking")
}
